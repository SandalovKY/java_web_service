
package server.generated.student;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ServerStudentImpl", targetNamespace = "http://mywebapp.ru/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ServerStudentImpl {


    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.Double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMark", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.GetMark")
    @ResponseWrapper(localName = "getMarkResponse", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.GetMarkResponse")
    @Action(input = "http://mywebapp.ru/ServerStudentImpl/getMarkRequest", output = "http://mywebapp.ru/ServerStudentImpl/getMarkResponse")
    public Double getMark(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns byte[]
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "downloadWork", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.DownloadWork")
    @ResponseWrapper(localName = "downloadWorkResponse", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.DownloadWorkResponse")
    @Action(input = "http://mywebapp.ru/ServerStudentImpl/downloadWorkRequest", output = "http://mywebapp.ru/ServerStudentImpl/downloadWorkResponse")
    public byte[] downloadWork(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<server.generated.student.WorkRecord>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "initConnection", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.InitConnection")
    @ResponseWrapper(localName = "initConnectionResponse", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.InitConnectionResponse")
    @Action(input = "http://mywebapp.ru/ServerStudentImpl/initConnectionRequest", output = "http://mywebapp.ru/ServerStudentImpl/initConnectionResponse")
    public List<WorkRecord> initConnection(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "loadWork", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.LoadWork")
    @ResponseWrapper(localName = "loadWorkResponse", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.LoadWorkResponse")
    @Action(input = "http://mywebapp.ru/ServerStudentImpl/loadWorkRequest", output = "http://mywebapp.ru/ServerStudentImpl/loadWorkResponse")
    public Integer loadWork(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        byte[] arg2);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<java.lang.Integer>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getWorksForCheck", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.GetWorksForCheck")
    @ResponseWrapper(localName = "getWorksForCheckResponse", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.GetWorksForCheckResponse")
    @Action(input = "http://mywebapp.ru/ServerStudentImpl/getWorksForCheckRequest", output = "http://mywebapp.ru/ServerStudentImpl/getWorksForCheckResponse")
    public List<Integer> getWorksForCheck(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "setMark", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.SetMark")
    @ResponseWrapper(localName = "setMarkResponse", targetNamespace = "http://mywebapp.ru/", className = "server.generated.student.SetMarkResponse")
    @Action(input = "http://mywebapp.ru/ServerStudentImpl/setMarkRequest", output = "http://mywebapp.ru/ServerStudentImpl/setMarkResponse")
    public void setMark(
        @WebParam(name = "arg0", targetNamespace = "")
        Integer arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        Integer arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        Integer arg2);

}
